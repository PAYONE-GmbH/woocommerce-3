<?php

namespace Payone\Gateway;

use Automattic\WooCommerce\Blocks\Payments\Integrations\AbstractPaymentMethodType;
use Automattic\WooCommerce\StoreApi\Payments\PaymentContext;
use Payone\Plugin;

class PayoneBlocksSupport extends AbstractPaymentMethodType {
	protected $name = 'payone';

	public function initialize() {
		add_action( 'wp_enqueue_scripts', [ $this, 'client_styles' ] );
		add_action( 'woocommerce_rest_checkout_process_payment_with_context', [
			$this,
			'add_payment_request_order_meta'
		], 8, 2 );

		if ( ! property_exists( $this, 'creditCardGateway' ) ) {
			$this->creditCardGateway = new CreditCard();
		}

		if ( ! property_exists( $this, 'paylaSecuredInvoiceGateway' ) ) {
			$this->paylaSecuredInvoiceGateway = new SecuredInvoice();
		}

		if ( ! property_exists( $this, 'paylaSecuredInstallmentGateway' ) ) {
			$this->paylaSecuredInstallmentGateway = new SecuredInstallment();
		}

		if ( ! property_exists( $this, 'paylaSecuredDirectDebitGateway' ) ) {
			$this->paylaSecuredDirectDebitGateway = new SecuredDirectDebit();
		}
	}

	public function is_active() {
		return parent::is_active(); // TODO: Change the autogenerated stub
	}

	/**
	 * In this function you should register your payment method scripts (using wp_register_script) and then return the
	 * script handles you registered with. This will be used to add your payment method as a dependency of the checkout
	 * script and thus take sure of loading it correctly.
	 *
	 * @return string[]
	 */
	public function get_payment_method_script_handles() {
		$asset_path   = PAYONE_PLUGIN_URL . '/assets/build/index.asset.php';
		$version      = PAYONE_PLUGIN_VERSION;
		$dependencies = [];
		if ( file_exists( $asset_path ) ) {
			$asset        = require $asset_path;
			$version      = is_array( $asset ) && isset( $asset['version'] )
				? $asset['version']
				: $version;
			$dependencies = is_array( $asset ) && isset( $asset['dependencies'] )
				? $asset['dependencies']
				: $dependencies;
		}

		wp_register_script(
			'wc-payone-blocks-integration',
			PAYONE_PLUGIN_URL . '/assets/build/blocks.js',
			$dependencies,
			$version,
			true
		);

		wp_set_script_translations( 'wc-payone-blocks-integration', 'payone-woocommerce-3' );

		return [ 'wc-payone-blocks-integration' ];
	}

	/**
	 * Include this if your payment method has a script you only want to load in the editor context for the checkout
	 * block. Include here any script from get_payment_method_script_handles that is also needed in the admin.
	 *
	 * @return string[]
	 */
	public function get_payment_method_script_handles_for_admin() {
		return parent::get_payment_method_script_handles_for_admin(); // TODO: Change the autogenerated stub
	}

	/**
	 * You can return from this function an associative array of data you want to be exposed for your payment method
	 * client side. This data will be available client side via wc.wcSettings.getSetting. So for instance if you
	 * assigned stripe as the value of the name property for this class, client side you can access any data
	 * via: wc.wcSettings.getSetting( 'stripe_data' ). That would return an object matching the shape of the
	 * associative array you returned from this function.
	 *
	 * @return array
	 */
	public function get_payment_method_data() {
		$data = parent::get_payment_method_data();

		$data['creditCardCheckRequestConfig'] = $this->get_credit_card_check_request();
		$data['payoneConfig']                 = $this->creditCardGateway->javascript_payone_config();
		$data['cardTypes']                    = $this->get_card_types();
		$data['epsBankGroups']                = $this->get_eps_bank_groups();
		$data['idealBankGroups']              = $this->get_ideal_bank_groups();
		$data['ratepayCalculationUrl']        = Plugin::get_callback_url( [ 'type' => 'ajax-ratepay-calculate' ] );
		$data['klarnaStartSessionUrl']        = Plugin::get_callback_url( [ 'type' => 'ajax-klarna-start-session' ] );
		$data['sepaManageMandateUrl']         = Plugin::get_callback_url( [ 'type' => 'ajax-manage-mandate' ] );
		$data['paylaConfig']                  = [
			'environmentKey'          => $this->paylaSecuredInvoiceGateway->get_environment(),
			'cssUrl'                  => $this->paylaSecuredInvoiceGateway->get_client_css(),
			'jsUrl'                   => $this->paylaSecuredInvoiceGateway->get_client_js(),
			'tokenSecuredInvoice'     => $this->paylaSecuredInvoiceGateway->get_snippet_token(),
			'tokenSecuredInstallment' => $this->paylaSecuredInstallmentGateway->get_snippet_token(),
			'tokenSecuredDirectDebit' => $this->paylaSecuredDirectDebitGateway->get_snippet_token(),
			'urlSecuredInstallment'   => Plugin::get_callback_url( [ 'type' => 'ajax-secured-installment-options' ] ),
		];


		// TODO: installmentMonthOptions müssen hier befüllt werden
		$data['installmentMonthOptions'] = [
			'0',
			'3',
			'6',
			'12',
			'24',
		];

		return $data;
	}

	private function get_card_types() {
		return array_map(
			function ( $brand ) {
				return [
					'value' => $brand,
					'title' => $this->creditCardGateway->get_option( 'cc_brand_label_' . $brand ),
				];
			},
			$this->creditCardGateway->get_option( 'cc_brands' )
		);
	}

	private function get_credit_card_check_request() {
		$payoneRequestOptions = [
			'mode'          => esc_attr( $this->creditCardGateway->get_mode() ),
			'merchant_id'   => esc_attr( $this->creditCardGateway->get_merchant_id() ),
			'account_id'    => esc_attr( $this->creditCardGateway->get_account_id() ),
			'portal_id'     => esc_attr( $this->creditCardGateway->get_portal_id() ),
			'key'           => esc_attr( $this->creditCardGateway->get_key() ),
			'request'       => 'creditcardcheck',
			'responsetype'  => 'JSON',
			'encoding'      => 'UTF-8',
			'storecarddata' => 'yes',
		];

		return array_merge( $payoneRequestOptions, [
			'hash' => $this->creditCardGateway->calculate_hash( $payoneRequestOptions )
		] );
	}

	// TODO: Derzeit einfach kopiert aus Gateway/Eps.php
	private function get_eps_bank_groups() {
		return [
			'ARZ_OAB'       => 'Apothekerbank',
			'ARZ_BAF'       => 'Ärztebank',
			'BA_AUS'        => 'Bank Austria',
			'ARZ_BCS'       => 'Bankhaus Carl Spängler & Co.AG',
			'EPS_SCHEL'     => 'Bankhaus Schelhammer & Schattera AG',
			'BAWAG_PSK'     => 'BAWAG P.S.K. AG',
			'BAWAG_ESY'     => 'Easybank AG',
			'SPARDAT_EBS'   => 'Erste Bank und Sparkassen',
			'ARZ_HAA'       => 'Hypo Alpe-Adria-Bank International AG',
			'ARZ_VLH'       => 'Hypo Landesbank Vorarlberg',
			'HRAC_OOS'      => 'HYPO Oberösterreich,Salzburg,Steiermark',
			'ARZ_HTB'       => 'Hypo Tirol Bank AG',
			'EPS_OBAG'      => 'Oberbank AG',
			'RAC_RAC'       => 'Raiffeisen Bankengruppe Österreich',
			'EPS_SCHOELLER' => 'Schoellerbank AG',
			'ARZ_OVB'       => 'Volksbank Gruppe',
			'EPS_VRBB'      => 'VR-Bank Braunau',
			'EPS_AAB'       => 'Austrian Anadi Bank AG',
			'EPS_BKS'       => 'BKS Bank AG',
			'EPS_BKB'       => 'Brüll Kallmus Bank AG',
			'EPS_VLB'       => 'BTV VIER LÄNDER BANK',
			'EPS_CBGG'      => 'Capital Bank Grawe Gruppe AG',
			'EPS_DB'        => 'Dolomitenbank',
			'EPS_NOELB'     => 'HYPO NOE Landesbank AG',
			'EPS_HBL'       => 'HYPO-BANK BURGENLAND Aktiengesellschaft',
			'EPS_MFB'       => 'Marchfelder Bank',
			'EPS_SPDBW'     => 'Sparda Bank Wien',
			'EPS_SPDBA'     => 'SPARDA-BANK AUSTRIA',
			'EPS_VKB'       => 'Volkskreditbank AG',
		];
	}

	private function get_ideal_bank_groups() {
		return [
			'ABN_AMRO_BANK'         => 'ABN Amro',
			'ASN_BANK'              => 'ASN Bank',
			'BUNQ_BANK'             => 'Bunq',
			'ING_BANK'              => 'ING Bank',
			'KNAB_BANK'             => 'Knab',
			'RABOBANK'              => 'Rabobank',
			'REVOLUT'               => 'Revolut',
			'SNS_BANK'              => 'SNS Bank',
			'SNS_REGIO_BANK'        => 'Regio Bank',
			'TRIODOS_BANK'          => 'Triodos Bank',
			'VAN_LANSCHOT_BANKIERS' => 'van Lanschot',
			'YOURSAFE'              => 'Yoursafe B.V',
		];
	}

	public function client_styles() {
		wp_register_style(
			'payone_client_styles',
			PAYONE_PLUGIN_URL . '/assets/css/client.css',
			[],
			PAYONE_PLUGIN_VERSION
		);

		if ( ! is_admin() ) {
			wp_enqueue_style( 'payone_client_styles' );
		}
	}

	public function add_payment_request_order_meta( PaymentContext $context ) {
		$data = $context->payment_data;
		if ( $context->payment_type === RatepayDirectDebit::GATEWAY_ID ) {
			$_POST['ratepay_direct_debit_iban']     = $data['ratepay_direct_debit_iban'];
			$_POST['ratepay_direct_debit_birthday'] = $data['ratepay_direct_debit_birthday'];
		}

		if ( $context->payment_type === RatepayOpenInvoice::GATEWAY_ID ) {
			$_POST['ratepay_direct_debit_birthday'] = $data['ratepay_direct_debit_birthday'];
		}

		if ( $context->payment_type === CreditCard::GATEWAY_ID ) {
			$_POST['card_pseudopan'] = $data['card_pseudopan'];
			$_POST['card_holder']    = $data['card_holder'];
		}

		if ( $context->payment_type === Eps::GATEWAY_ID ) {
			$_POST['bankgrouptype'] = $data['bankgrouptype'];
		}

		if ( $context->payment_type === Ideal::GATEWAY_ID ) {
			$_POST['bankgrouptype'] = $data['bankgrouptype'];
		}
	}
}
